%%
%% Autogenerated by Thrift Compiler (1.0.0-dev)
%%
%% DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
%%

-module(note_store_thrift).
-behaviour(thrift_service).


-include("note_store_thrift.hrl").

-export([struct_info/1, function_info/2]).

struct_info(_) -> erlang:error(function_clause).
%%% interface
% getSyncState(This, AuthenticationToken)
function_info('getSyncState', params_type) ->
  {struct, [{1, string}]}
;
function_info('getSyncState', reply_type) ->
  {struct, {'note_store_types', 'SyncState'}};
function_info('getSyncState', exceptions) ->
  {struct, [{1, {struct, {'errors_types', 'EDAMUserException'}}},
          {2, {struct, {'errors_types', 'EDAMSystemException'}}}]}
;
% getSyncStateWithMetrics(This, AuthenticationToken, ClientMetrics)
function_info('getSyncStateWithMetrics', params_type) ->
  {struct, [{1, string},
          {2, {struct, {'note_store_types', 'ClientUsageMetrics'}}}]}
;
function_info('getSyncStateWithMetrics', reply_type) ->
  {struct, {'note_store_types', 'SyncState'}};
function_info('getSyncStateWithMetrics', exceptions) ->
  {struct, [{1, {struct, {'errors_types', 'EDAMUserException'}}},
          {2, {struct, {'errors_types', 'EDAMSystemException'}}}]}
;
% getSyncChunk(This, AuthenticationToken, AfterUSN, MaxEntries, FullSyncOnly)
function_info('getSyncChunk', params_type) ->
  {struct, [{1, string},
          {2, i32},
          {3, i32},
          {4, bool}]}
;
function_info('getSyncChunk', reply_type) ->
  {struct, {'note_store_types', 'SyncChunk'}};
function_info('getSyncChunk', exceptions) ->
  {struct, [{1, {struct, {'errors_types', 'EDAMUserException'}}},
          {2, {struct, {'errors_types', 'EDAMSystemException'}}}]}
;
% getFilteredSyncChunk(This, AuthenticationToken, AfterUSN, MaxEntries, Filter)
function_info('getFilteredSyncChunk', params_type) ->
  {struct, [{1, string},
          {2, i32},
          {3, i32},
          {4, {struct, {'note_store_types', 'SyncChunkFilter'}}}]}
;
function_info('getFilteredSyncChunk', reply_type) ->
  {struct, {'note_store_types', 'SyncChunk'}};
function_info('getFilteredSyncChunk', exceptions) ->
  {struct, [{1, {struct, {'errors_types', 'EDAMUserException'}}},
          {2, {struct, {'errors_types', 'EDAMSystemException'}}}]}
;
% getLinkedNotebookSyncState(This, AuthenticationToken, LinkedNotebook)
function_info('getLinkedNotebookSyncState', params_type) ->
  {struct, [{1, string},
          {2, {struct, {'types_types', 'LinkedNotebook'}}}]}
;
function_info('getLinkedNotebookSyncState', reply_type) ->
  {struct, {'note_store_types', 'SyncState'}};
function_info('getLinkedNotebookSyncState', exceptions) ->
  {struct, [{1, {struct, {'errors_types', 'EDAMUserException'}}},
          {2, {struct, {'errors_types', 'EDAMSystemException'}}},
          {3, {struct, {'errors_types', 'EDAMNotFoundException'}}}]}
;
% getLinkedNotebookSyncChunk(This, AuthenticationToken, LinkedNotebook, AfterUSN, MaxEntries, FullSyncOnly)
function_info('getLinkedNotebookSyncChunk', params_type) ->
  {struct, [{1, string},
          {2, {struct, {'types_types', 'LinkedNotebook'}}},
          {3, i32},
          {4, i32},
          {5, bool}]}
;
function_info('getLinkedNotebookSyncChunk', reply_type) ->
  {struct, {'note_store_types', 'SyncChunk'}};
function_info('getLinkedNotebookSyncChunk', exceptions) ->
  {struct, [{1, {struct, {'errors_types', 'EDAMUserException'}}},
          {2, {struct, {'errors_types', 'EDAMSystemException'}}},
          {3, {struct, {'errors_types', 'EDAMNotFoundException'}}}]}
;
% listNotebooks(This, AuthenticationToken)
function_info('listNotebooks', params_type) ->
  {struct, [{1, string}]}
;
function_info('listNotebooks', reply_type) ->
  {list, {struct, {'types_types', 'Notebook'}}};
function_info('listNotebooks', exceptions) ->
  {struct, [{1, {struct, {'errors_types', 'EDAMUserException'}}},
          {2, {struct, {'errors_types', 'EDAMSystemException'}}}]}
;
% getNotebook(This, AuthenticationToken, Guid)
function_info('getNotebook', params_type) ->
  {struct, [{1, string},
          {2, string}]}
;
function_info('getNotebook', reply_type) ->
  {struct, {'types_types', 'Notebook'}};
function_info('getNotebook', exceptions) ->
  {struct, [{1, {struct, {'errors_types', 'EDAMUserException'}}},
          {2, {struct, {'errors_types', 'EDAMSystemException'}}},
          {3, {struct, {'errors_types', 'EDAMNotFoundException'}}}]}
;
% getDefaultNotebook(This, AuthenticationToken)
function_info('getDefaultNotebook', params_type) ->
  {struct, [{1, string}]}
;
function_info('getDefaultNotebook', reply_type) ->
  {struct, {'types_types', 'Notebook'}};
function_info('getDefaultNotebook', exceptions) ->
  {struct, [{1, {struct, {'errors_types', 'EDAMUserException'}}},
          {2, {struct, {'errors_types', 'EDAMSystemException'}}}]}
;
% createNotebook(This, AuthenticationToken, Notebook)
function_info('createNotebook', params_type) ->
  {struct, [{1, string},
          {2, {struct, {'types_types', 'Notebook'}}}]}
;
function_info('createNotebook', reply_type) ->
  {struct, {'types_types', 'Notebook'}};
function_info('createNotebook', exceptions) ->
  {struct, [{1, {struct, {'errors_types', 'EDAMUserException'}}},
          {2, {struct, {'errors_types', 'EDAMSystemException'}}}]}
;
% updateNotebook(This, AuthenticationToken, Notebook)
function_info('updateNotebook', params_type) ->
  {struct, [{1, string},
          {2, {struct, {'types_types', 'Notebook'}}}]}
;
function_info('updateNotebook', reply_type) ->
  i32;
function_info('updateNotebook', exceptions) ->
  {struct, [{1, {struct, {'errors_types', 'EDAMUserException'}}},
          {2, {struct, {'errors_types', 'EDAMSystemException'}}},
          {3, {struct, {'errors_types', 'EDAMNotFoundException'}}}]}
;
% expungeNotebook(This, AuthenticationToken, Guid)
function_info('expungeNotebook', params_type) ->
  {struct, [{1, string},
          {2, string}]}
;
function_info('expungeNotebook', reply_type) ->
  i32;
function_info('expungeNotebook', exceptions) ->
  {struct, [{1, {struct, {'errors_types', 'EDAMUserException'}}},
          {2, {struct, {'errors_types', 'EDAMSystemException'}}},
          {3, {struct, {'errors_types', 'EDAMNotFoundException'}}}]}
;
% listTags(This, AuthenticationToken)
function_info('listTags', params_type) ->
  {struct, [{1, string}]}
;
function_info('listTags', reply_type) ->
  {list, {struct, {'types_types', 'Tag'}}};
function_info('listTags', exceptions) ->
  {struct, [{1, {struct, {'errors_types', 'EDAMUserException'}}},
          {2, {struct, {'errors_types', 'EDAMSystemException'}}}]}
;
% listTagsByNotebook(This, AuthenticationToken, NotebookGuid)
function_info('listTagsByNotebook', params_type) ->
  {struct, [{1, string},
          {2, string}]}
;
function_info('listTagsByNotebook', reply_type) ->
  {list, {struct, {'types_types', 'Tag'}}};
function_info('listTagsByNotebook', exceptions) ->
  {struct, [{1, {struct, {'errors_types', 'EDAMUserException'}}},
          {2, {struct, {'errors_types', 'EDAMSystemException'}}},
          {3, {struct, {'errors_types', 'EDAMNotFoundException'}}}]}
;
% getTag(This, AuthenticationToken, Guid)
function_info('getTag', params_type) ->
  {struct, [{1, string},
          {2, string}]}
;
function_info('getTag', reply_type) ->
  {struct, {'types_types', 'Tag'}};
function_info('getTag', exceptions) ->
  {struct, [{1, {struct, {'errors_types', 'EDAMUserException'}}},
          {2, {struct, {'errors_types', 'EDAMSystemException'}}},
          {3, {struct, {'errors_types', 'EDAMNotFoundException'}}}]}
;
% createTag(This, AuthenticationToken, Tag)
function_info('createTag', params_type) ->
  {struct, [{1, string},
          {2, {struct, {'types_types', 'Tag'}}}]}
;
function_info('createTag', reply_type) ->
  {struct, {'types_types', 'Tag'}};
function_info('createTag', exceptions) ->
  {struct, [{1, {struct, {'errors_types', 'EDAMUserException'}}},
          {2, {struct, {'errors_types', 'EDAMSystemException'}}},
          {3, {struct, {'errors_types', 'EDAMNotFoundException'}}}]}
;
% updateTag(This, AuthenticationToken, Tag)
function_info('updateTag', params_type) ->
  {struct, [{1, string},
          {2, {struct, {'types_types', 'Tag'}}}]}
;
function_info('updateTag', reply_type) ->
  i32;
function_info('updateTag', exceptions) ->
  {struct, [{1, {struct, {'errors_types', 'EDAMUserException'}}},
          {2, {struct, {'errors_types', 'EDAMSystemException'}}},
          {3, {struct, {'errors_types', 'EDAMNotFoundException'}}}]}
;
% untagAll(This, AuthenticationToken, Guid)
function_info('untagAll', params_type) ->
  {struct, [{1, string},
          {2, string}]}
;
function_info('untagAll', reply_type) ->
  {struct, []};
function_info('untagAll', exceptions) ->
  {struct, [{1, {struct, {'errors_types', 'EDAMUserException'}}},
          {2, {struct, {'errors_types', 'EDAMSystemException'}}},
          {3, {struct, {'errors_types', 'EDAMNotFoundException'}}}]}
;
% expungeTag(This, AuthenticationToken, Guid)
function_info('expungeTag', params_type) ->
  {struct, [{1, string},
          {2, string}]}
;
function_info('expungeTag', reply_type) ->
  i32;
function_info('expungeTag', exceptions) ->
  {struct, [{1, {struct, {'errors_types', 'EDAMUserException'}}},
          {2, {struct, {'errors_types', 'EDAMSystemException'}}},
          {3, {struct, {'errors_types', 'EDAMNotFoundException'}}}]}
;
% listSearches(This, AuthenticationToken)
function_info('listSearches', params_type) ->
  {struct, [{1, string}]}
;
function_info('listSearches', reply_type) ->
  {list, {struct, {'types_types', 'SavedSearch'}}};
function_info('listSearches', exceptions) ->
  {struct, [{1, {struct, {'errors_types', 'EDAMUserException'}}},
          {2, {struct, {'errors_types', 'EDAMSystemException'}}}]}
;
% getSearch(This, AuthenticationToken, Guid)
function_info('getSearch', params_type) ->
  {struct, [{1, string},
          {2, string}]}
;
function_info('getSearch', reply_type) ->
  {struct, {'types_types', 'SavedSearch'}};
function_info('getSearch', exceptions) ->
  {struct, [{1, {struct, {'errors_types', 'EDAMUserException'}}},
          {2, {struct, {'errors_types', 'EDAMSystemException'}}},
          {3, {struct, {'errors_types', 'EDAMNotFoundException'}}}]}
;
% createSearch(This, AuthenticationToken, Search)
function_info('createSearch', params_type) ->
  {struct, [{1, string},
          {2, {struct, {'types_types', 'SavedSearch'}}}]}
;
function_info('createSearch', reply_type) ->
  {struct, {'types_types', 'SavedSearch'}};
function_info('createSearch', exceptions) ->
  {struct, [{1, {struct, {'errors_types', 'EDAMUserException'}}},
          {2, {struct, {'errors_types', 'EDAMSystemException'}}}]}
;
% updateSearch(This, AuthenticationToken, Search)
function_info('updateSearch', params_type) ->
  {struct, [{1, string},
          {2, {struct, {'types_types', 'SavedSearch'}}}]}
;
function_info('updateSearch', reply_type) ->
  i32;
function_info('updateSearch', exceptions) ->
  {struct, [{1, {struct, {'errors_types', 'EDAMUserException'}}},
          {2, {struct, {'errors_types', 'EDAMSystemException'}}},
          {3, {struct, {'errors_types', 'EDAMNotFoundException'}}}]}
;
% expungeSearch(This, AuthenticationToken, Guid)
function_info('expungeSearch', params_type) ->
  {struct, [{1, string},
          {2, string}]}
;
function_info('expungeSearch', reply_type) ->
  i32;
function_info('expungeSearch', exceptions) ->
  {struct, [{1, {struct, {'errors_types', 'EDAMUserException'}}},
          {2, {struct, {'errors_types', 'EDAMSystemException'}}},
          {3, {struct, {'errors_types', 'EDAMNotFoundException'}}}]}
;
% findNotes(This, AuthenticationToken, Filter, Offset, MaxNotes)
function_info('findNotes', params_type) ->
  {struct, [{1, string},
          {2, {struct, {'note_store_types', 'NoteFilter'}}},
          {3, i32},
          {4, i32}]}
;
function_info('findNotes', reply_type) ->
  {struct, {'note_store_types', 'NoteList'}};
function_info('findNotes', exceptions) ->
  {struct, [{1, {struct, {'errors_types', 'EDAMUserException'}}},
          {2, {struct, {'errors_types', 'EDAMSystemException'}}},
          {3, {struct, {'errors_types', 'EDAMNotFoundException'}}}]}
;
% findNoteOffset(This, AuthenticationToken, Filter, Guid)
function_info('findNoteOffset', params_type) ->
  {struct, [{1, string},
          {2, {struct, {'note_store_types', 'NoteFilter'}}},
          {3, string}]}
;
function_info('findNoteOffset', reply_type) ->
  i32;
function_info('findNoteOffset', exceptions) ->
  {struct, [{1, {struct, {'errors_types', 'EDAMUserException'}}},
          {2, {struct, {'errors_types', 'EDAMSystemException'}}},
          {3, {struct, {'errors_types', 'EDAMNotFoundException'}}}]}
;
% findNotesMetadata(This, AuthenticationToken, Filter, Offset, MaxNotes, ResultSpec)
function_info('findNotesMetadata', params_type) ->
  {struct, [{1, string},
          {2, {struct, {'note_store_types', 'NoteFilter'}}},
          {3, i32},
          {4, i32},
          {5, {struct, {'note_store_types', 'NotesMetadataResultSpec'}}}]}
;
function_info('findNotesMetadata', reply_type) ->
  {struct, {'note_store_types', 'NotesMetadataList'}};
function_info('findNotesMetadata', exceptions) ->
  {struct, [{1, {struct, {'errors_types', 'EDAMUserException'}}},
          {2, {struct, {'errors_types', 'EDAMSystemException'}}},
          {3, {struct, {'errors_types', 'EDAMNotFoundException'}}}]}
;
% findNoteCounts(This, AuthenticationToken, Filter, WithTrash)
function_info('findNoteCounts', params_type) ->
  {struct, [{1, string},
          {2, {struct, {'note_store_types', 'NoteFilter'}}},
          {3, bool}]}
;
function_info('findNoteCounts', reply_type) ->
  {struct, {'note_store_types', 'NoteCollectionCounts'}};
function_info('findNoteCounts', exceptions) ->
  {struct, [{1, {struct, {'errors_types', 'EDAMUserException'}}},
          {2, {struct, {'errors_types', 'EDAMSystemException'}}},
          {3, {struct, {'errors_types', 'EDAMNotFoundException'}}}]}
;
% getNote(This, AuthenticationToken, Guid, WithContent, WithResourcesData, WithResourcesRecognition, WithResourcesAlternateData)
function_info('getNote', params_type) ->
  {struct, [{1, string},
          {2, string},
          {3, bool},
          {4, bool},
          {5, bool},
          {6, bool}]}
;
function_info('getNote', reply_type) ->
  {struct, {'types_types', 'Note'}};
function_info('getNote', exceptions) ->
  {struct, [{1, {struct, {'errors_types', 'EDAMUserException'}}},
          {2, {struct, {'errors_types', 'EDAMSystemException'}}},
          {3, {struct, {'errors_types', 'EDAMNotFoundException'}}}]}
;
% getNoteApplicationData(This, AuthenticationToken, Guid)
function_info('getNoteApplicationData', params_type) ->
  {struct, [{1, string},
          {2, string}]}
;
function_info('getNoteApplicationData', reply_type) ->
  {struct, {'types_types', 'LazyMap'}};
function_info('getNoteApplicationData', exceptions) ->
  {struct, [{1, {struct, {'errors_types', 'EDAMUserException'}}},
          {2, {struct, {'errors_types', 'EDAMSystemException'}}},
          {3, {struct, {'errors_types', 'EDAMNotFoundException'}}}]}
;
% getNoteApplicationDataEntry(This, AuthenticationToken, Guid, Key)
function_info('getNoteApplicationDataEntry', params_type) ->
  {struct, [{1, string},
          {2, string},
          {3, string}]}
;
function_info('getNoteApplicationDataEntry', reply_type) ->
  string;
function_info('getNoteApplicationDataEntry', exceptions) ->
  {struct, [{1, {struct, {'errors_types', 'EDAMUserException'}}},
          {2, {struct, {'errors_types', 'EDAMSystemException'}}},
          {3, {struct, {'errors_types', 'EDAMNotFoundException'}}}]}
;
% setNoteApplicationDataEntry(This, AuthenticationToken, Guid, Key, Value)
function_info('setNoteApplicationDataEntry', params_type) ->
  {struct, [{1, string},
          {2, string},
          {3, string},
          {4, string}]}
;
function_info('setNoteApplicationDataEntry', reply_type) ->
  i32;
function_info('setNoteApplicationDataEntry', exceptions) ->
  {struct, [{1, {struct, {'errors_types', 'EDAMUserException'}}},
          {2, {struct, {'errors_types', 'EDAMSystemException'}}},
          {3, {struct, {'errors_types', 'EDAMNotFoundException'}}}]}
;
% unsetNoteApplicationDataEntry(This, AuthenticationToken, Guid, Key)
function_info('unsetNoteApplicationDataEntry', params_type) ->
  {struct, [{1, string},
          {2, string},
          {3, string}]}
;
function_info('unsetNoteApplicationDataEntry', reply_type) ->
  i32;
function_info('unsetNoteApplicationDataEntry', exceptions) ->
  {struct, [{1, {struct, {'errors_types', 'EDAMUserException'}}},
          {2, {struct, {'errors_types', 'EDAMSystemException'}}},
          {3, {struct, {'errors_types', 'EDAMNotFoundException'}}}]}
;
% getNoteContent(This, AuthenticationToken, Guid)
function_info('getNoteContent', params_type) ->
  {struct, [{1, string},
          {2, string}]}
;
function_info('getNoteContent', reply_type) ->
  string;
function_info('getNoteContent', exceptions) ->
  {struct, [{1, {struct, {'errors_types', 'EDAMUserException'}}},
          {2, {struct, {'errors_types', 'EDAMSystemException'}}},
          {3, {struct, {'errors_types', 'EDAMNotFoundException'}}}]}
;
% getNoteSearchText(This, AuthenticationToken, Guid, NoteOnly, TokenizeForIndexing)
function_info('getNoteSearchText', params_type) ->
  {struct, [{1, string},
          {2, string},
          {3, bool},
          {4, bool}]}
;
function_info('getNoteSearchText', reply_type) ->
  string;
function_info('getNoteSearchText', exceptions) ->
  {struct, [{1, {struct, {'errors_types', 'EDAMUserException'}}},
          {2, {struct, {'errors_types', 'EDAMSystemException'}}},
          {3, {struct, {'errors_types', 'EDAMNotFoundException'}}}]}
;
% getResourceSearchText(This, AuthenticationToken, Guid)
function_info('getResourceSearchText', params_type) ->
  {struct, [{1, string},
          {2, string}]}
;
function_info('getResourceSearchText', reply_type) ->
  string;
function_info('getResourceSearchText', exceptions) ->
  {struct, [{1, {struct, {'errors_types', 'EDAMUserException'}}},
          {2, {struct, {'errors_types', 'EDAMSystemException'}}},
          {3, {struct, {'errors_types', 'EDAMNotFoundException'}}}]}
;
% getNoteTagNames(This, AuthenticationToken, Guid)
function_info('getNoteTagNames', params_type) ->
  {struct, [{1, string},
          {2, string}]}
;
function_info('getNoteTagNames', reply_type) ->
  {list, string};
function_info('getNoteTagNames', exceptions) ->
  {struct, [{1, {struct, {'errors_types', 'EDAMUserException'}}},
          {2, {struct, {'errors_types', 'EDAMSystemException'}}},
          {3, {struct, {'errors_types', 'EDAMNotFoundException'}}}]}
;
% createNote(This, AuthenticationToken, Note)
function_info('createNote', params_type) ->
  {struct, [{1, string},
          {2, {struct, {'types_types', 'Note'}}}]}
;
function_info('createNote', reply_type) ->
  {struct, {'types_types', 'Note'}};
function_info('createNote', exceptions) ->
  {struct, [{1, {struct, {'errors_types', 'EDAMUserException'}}},
          {2, {struct, {'errors_types', 'EDAMSystemException'}}},
          {3, {struct, {'errors_types', 'EDAMNotFoundException'}}}]}
;
% updateNote(This, AuthenticationToken, Note)
function_info('updateNote', params_type) ->
  {struct, [{1, string},
          {2, {struct, {'types_types', 'Note'}}}]}
;
function_info('updateNote', reply_type) ->
  {struct, {'types_types', 'Note'}};
function_info('updateNote', exceptions) ->
  {struct, [{1, {struct, {'errors_types', 'EDAMUserException'}}},
          {2, {struct, {'errors_types', 'EDAMSystemException'}}},
          {3, {struct, {'errors_types', 'EDAMNotFoundException'}}}]}
;
% deleteNote(This, AuthenticationToken, Guid)
function_info('deleteNote', params_type) ->
  {struct, [{1, string},
          {2, string}]}
;
function_info('deleteNote', reply_type) ->
  i32;
function_info('deleteNote', exceptions) ->
  {struct, [{1, {struct, {'errors_types', 'EDAMUserException'}}},
          {2, {struct, {'errors_types', 'EDAMSystemException'}}},
          {3, {struct, {'errors_types', 'EDAMNotFoundException'}}}]}
;
% expungeNote(This, AuthenticationToken, Guid)
function_info('expungeNote', params_type) ->
  {struct, [{1, string},
          {2, string}]}
;
function_info('expungeNote', reply_type) ->
  i32;
function_info('expungeNote', exceptions) ->
  {struct, [{1, {struct, {'errors_types', 'EDAMUserException'}}},
          {2, {struct, {'errors_types', 'EDAMSystemException'}}},
          {3, {struct, {'errors_types', 'EDAMNotFoundException'}}}]}
;
% expungeNotes(This, AuthenticationToken, NoteGuids)
function_info('expungeNotes', params_type) ->
  {struct, [{1, string},
          {2, {list, string}}]}
;
function_info('expungeNotes', reply_type) ->
  i32;
function_info('expungeNotes', exceptions) ->
  {struct, [{1, {struct, {'errors_types', 'EDAMUserException'}}},
          {2, {struct, {'errors_types', 'EDAMSystemException'}}},
          {3, {struct, {'errors_types', 'EDAMNotFoundException'}}}]}
;
% expungeInactiveNotes(This, AuthenticationToken)
function_info('expungeInactiveNotes', params_type) ->
  {struct, [{1, string}]}
;
function_info('expungeInactiveNotes', reply_type) ->
  i32;
function_info('expungeInactiveNotes', exceptions) ->
  {struct, [{1, {struct, {'errors_types', 'EDAMUserException'}}},
          {2, {struct, {'errors_types', 'EDAMSystemException'}}}]}
;
% copyNote(This, AuthenticationToken, NoteGuid, ToNotebookGuid)
function_info('copyNote', params_type) ->
  {struct, [{1, string},
          {2, string},
          {3, string}]}
;
function_info('copyNote', reply_type) ->
  {struct, {'types_types', 'Note'}};
function_info('copyNote', exceptions) ->
  {struct, [{1, {struct, {'errors_types', 'EDAMUserException'}}},
          {2, {struct, {'errors_types', 'EDAMSystemException'}}},
          {3, {struct, {'errors_types', 'EDAMNotFoundException'}}}]}
;
% listNoteVersions(This, AuthenticationToken, NoteGuid)
function_info('listNoteVersions', params_type) ->
  {struct, [{1, string},
          {2, string}]}
;
function_info('listNoteVersions', reply_type) ->
  {list, {struct, {'note_store_types', 'NoteVersionId'}}};
function_info('listNoteVersions', exceptions) ->
  {struct, [{1, {struct, {'errors_types', 'EDAMUserException'}}},
          {2, {struct, {'errors_types', 'EDAMSystemException'}}},
          {3, {struct, {'errors_types', 'EDAMNotFoundException'}}}]}
;
% getNoteVersion(This, AuthenticationToken, NoteGuid, UpdateSequenceNum, WithResourcesData, WithResourcesRecognition, WithResourcesAlternateData)
function_info('getNoteVersion', params_type) ->
  {struct, [{1, string},
          {2, string},
          {3, i32},
          {4, bool},
          {5, bool},
          {6, bool}]}
;
function_info('getNoteVersion', reply_type) ->
  {struct, {'types_types', 'Note'}};
function_info('getNoteVersion', exceptions) ->
  {struct, [{1, {struct, {'errors_types', 'EDAMUserException'}}},
          {2, {struct, {'errors_types', 'EDAMSystemException'}}},
          {3, {struct, {'errors_types', 'EDAMNotFoundException'}}}]}
;
% getResource(This, AuthenticationToken, Guid, WithData, WithRecognition, WithAttributes, WithAlternateData)
function_info('getResource', params_type) ->
  {struct, [{1, string},
          {2, string},
          {3, bool},
          {4, bool},
          {5, bool},
          {6, bool}]}
;
function_info('getResource', reply_type) ->
  {struct, {'types_types', 'Resource'}};
function_info('getResource', exceptions) ->
  {struct, [{1, {struct, {'errors_types', 'EDAMUserException'}}},
          {2, {struct, {'errors_types', 'EDAMSystemException'}}},
          {3, {struct, {'errors_types', 'EDAMNotFoundException'}}}]}
;
% getResourceApplicationData(This, AuthenticationToken, Guid)
function_info('getResourceApplicationData', params_type) ->
  {struct, [{1, string},
          {2, string}]}
;
function_info('getResourceApplicationData', reply_type) ->
  {struct, {'types_types', 'LazyMap'}};
function_info('getResourceApplicationData', exceptions) ->
  {struct, [{1, {struct, {'errors_types', 'EDAMUserException'}}},
          {2, {struct, {'errors_types', 'EDAMSystemException'}}},
          {3, {struct, {'errors_types', 'EDAMNotFoundException'}}}]}
;
% getResourceApplicationDataEntry(This, AuthenticationToken, Guid, Key)
function_info('getResourceApplicationDataEntry', params_type) ->
  {struct, [{1, string},
          {2, string},
          {3, string}]}
;
function_info('getResourceApplicationDataEntry', reply_type) ->
  string;
function_info('getResourceApplicationDataEntry', exceptions) ->
  {struct, [{1, {struct, {'errors_types', 'EDAMUserException'}}},
          {2, {struct, {'errors_types', 'EDAMSystemException'}}},
          {3, {struct, {'errors_types', 'EDAMNotFoundException'}}}]}
;
% setResourceApplicationDataEntry(This, AuthenticationToken, Guid, Key, Value)
function_info('setResourceApplicationDataEntry', params_type) ->
  {struct, [{1, string},
          {2, string},
          {3, string},
          {4, string}]}
;
function_info('setResourceApplicationDataEntry', reply_type) ->
  i32;
function_info('setResourceApplicationDataEntry', exceptions) ->
  {struct, [{1, {struct, {'errors_types', 'EDAMUserException'}}},
          {2, {struct, {'errors_types', 'EDAMSystemException'}}},
          {3, {struct, {'errors_types', 'EDAMNotFoundException'}}}]}
;
% unsetResourceApplicationDataEntry(This, AuthenticationToken, Guid, Key)
function_info('unsetResourceApplicationDataEntry', params_type) ->
  {struct, [{1, string},
          {2, string},
          {3, string}]}
;
function_info('unsetResourceApplicationDataEntry', reply_type) ->
  i32;
function_info('unsetResourceApplicationDataEntry', exceptions) ->
  {struct, [{1, {struct, {'errors_types', 'EDAMUserException'}}},
          {2, {struct, {'errors_types', 'EDAMSystemException'}}},
          {3, {struct, {'errors_types', 'EDAMNotFoundException'}}}]}
;
% updateResource(This, AuthenticationToken, Resource)
function_info('updateResource', params_type) ->
  {struct, [{1, string},
          {2, {struct, {'types_types', 'Resource'}}}]}
;
function_info('updateResource', reply_type) ->
  i32;
function_info('updateResource', exceptions) ->
  {struct, [{1, {struct, {'errors_types', 'EDAMUserException'}}},
          {2, {struct, {'errors_types', 'EDAMSystemException'}}},
          {3, {struct, {'errors_types', 'EDAMNotFoundException'}}}]}
;
% getResourceData(This, AuthenticationToken, Guid)
function_info('getResourceData', params_type) ->
  {struct, [{1, string},
          {2, string}]}
;
function_info('getResourceData', reply_type) ->
  string;
function_info('getResourceData', exceptions) ->
  {struct, [{1, {struct, {'errors_types', 'EDAMUserException'}}},
          {2, {struct, {'errors_types', 'EDAMSystemException'}}},
          {3, {struct, {'errors_types', 'EDAMNotFoundException'}}}]}
;
% getResourceByHash(This, AuthenticationToken, NoteGuid, ContentHash, WithData, WithRecognition, WithAlternateData)
function_info('getResourceByHash', params_type) ->
  {struct, [{1, string},
          {2, string},
          {3, string},
          {4, bool},
          {5, bool},
          {6, bool}]}
;
function_info('getResourceByHash', reply_type) ->
  {struct, {'types_types', 'Resource'}};
function_info('getResourceByHash', exceptions) ->
  {struct, [{1, {struct, {'errors_types', 'EDAMUserException'}}},
          {2, {struct, {'errors_types', 'EDAMSystemException'}}},
          {3, {struct, {'errors_types', 'EDAMNotFoundException'}}}]}
;
% getResourceRecognition(This, AuthenticationToken, Guid)
function_info('getResourceRecognition', params_type) ->
  {struct, [{1, string},
          {2, string}]}
;
function_info('getResourceRecognition', reply_type) ->
  string;
function_info('getResourceRecognition', exceptions) ->
  {struct, [{1, {struct, {'errors_types', 'EDAMUserException'}}},
          {2, {struct, {'errors_types', 'EDAMSystemException'}}},
          {3, {struct, {'errors_types', 'EDAMNotFoundException'}}}]}
;
% getResourceAlternateData(This, AuthenticationToken, Guid)
function_info('getResourceAlternateData', params_type) ->
  {struct, [{1, string},
          {2, string}]}
;
function_info('getResourceAlternateData', reply_type) ->
  string;
function_info('getResourceAlternateData', exceptions) ->
  {struct, [{1, {struct, {'errors_types', 'EDAMUserException'}}},
          {2, {struct, {'errors_types', 'EDAMSystemException'}}},
          {3, {struct, {'errors_types', 'EDAMNotFoundException'}}}]}
;
% getResourceAttributes(This, AuthenticationToken, Guid)
function_info('getResourceAttributes', params_type) ->
  {struct, [{1, string},
          {2, string}]}
;
function_info('getResourceAttributes', reply_type) ->
  {struct, {'types_types', 'ResourceAttributes'}};
function_info('getResourceAttributes', exceptions) ->
  {struct, [{1, {struct, {'errors_types', 'EDAMUserException'}}},
          {2, {struct, {'errors_types', 'EDAMSystemException'}}},
          {3, {struct, {'errors_types', 'EDAMNotFoundException'}}}]}
;
% getPublicNotebook(This, UserId, PublicUri)
function_info('getPublicNotebook', params_type) ->
  {struct, [{1, i32},
          {2, string}]}
;
function_info('getPublicNotebook', reply_type) ->
  {struct, {'types_types', 'Notebook'}};
function_info('getPublicNotebook', exceptions) ->
  {struct, [{1, {struct, {'errors_types', 'EDAMSystemException'}}},
          {2, {struct, {'errors_types', 'EDAMNotFoundException'}}}]}
;
% createSharedNotebook(This, AuthenticationToken, SharedNotebook)
function_info('createSharedNotebook', params_type) ->
  {struct, [{1, string},
          {2, {struct, {'types_types', 'SharedNotebook'}}}]}
;
function_info('createSharedNotebook', reply_type) ->
  {struct, {'types_types', 'SharedNotebook'}};
function_info('createSharedNotebook', exceptions) ->
  {struct, [{1, {struct, {'errors_types', 'EDAMUserException'}}},
          {2, {struct, {'errors_types', 'EDAMNotFoundException'}}},
          {3, {struct, {'errors_types', 'EDAMSystemException'}}}]}
;
% updateSharedNotebook(This, AuthenticationToken, SharedNotebook)
function_info('updateSharedNotebook', params_type) ->
  {struct, [{1, string},
          {2, {struct, {'types_types', 'SharedNotebook'}}}]}
;
function_info('updateSharedNotebook', reply_type) ->
  i32;
function_info('updateSharedNotebook', exceptions) ->
  {struct, [{1, {struct, {'errors_types', 'EDAMUserException'}}},
          {2, {struct, {'errors_types', 'EDAMNotFoundException'}}},
          {3, {struct, {'errors_types', 'EDAMSystemException'}}}]}
;
% setSharedNotebookRecipientSettings(This, AuthenticationToken, SharedNotebookId, RecipientSettings)
function_info('setSharedNotebookRecipientSettings', params_type) ->
  {struct, [{1, string},
          {2, i64},
          {3, {struct, {'types_types', 'SharedNotebookRecipientSettings'}}}]}
;
function_info('setSharedNotebookRecipientSettings', reply_type) ->
  i32;
function_info('setSharedNotebookRecipientSettings', exceptions) ->
  {struct, [{1, {struct, {'errors_types', 'EDAMUserException'}}},
          {2, {struct, {'errors_types', 'EDAMNotFoundException'}}},
          {3, {struct, {'errors_types', 'EDAMSystemException'}}}]}
;
% sendMessageToSharedNotebookMembers(This, AuthenticationToken, NotebookGuid, MessageText, Recipients)
function_info('sendMessageToSharedNotebookMembers', params_type) ->
  {struct, [{1, string},
          {2, string},
          {3, string},
          {4, {list, string}}]}
;
function_info('sendMessageToSharedNotebookMembers', reply_type) ->
  i32;
function_info('sendMessageToSharedNotebookMembers', exceptions) ->
  {struct, [{1, {struct, {'errors_types', 'EDAMUserException'}}},
          {2, {struct, {'errors_types', 'EDAMNotFoundException'}}},
          {3, {struct, {'errors_types', 'EDAMSystemException'}}}]}
;
% listSharedNotebooks(This, AuthenticationToken)
function_info('listSharedNotebooks', params_type) ->
  {struct, [{1, string}]}
;
function_info('listSharedNotebooks', reply_type) ->
  {list, {struct, {'types_types', 'SharedNotebook'}}};
function_info('listSharedNotebooks', exceptions) ->
  {struct, [{1, {struct, {'errors_types', 'EDAMUserException'}}},
          {2, {struct, {'errors_types', 'EDAMNotFoundException'}}},
          {3, {struct, {'errors_types', 'EDAMSystemException'}}}]}
;
% expungeSharedNotebooks(This, AuthenticationToken, SharedNotebookIds)
function_info('expungeSharedNotebooks', params_type) ->
  {struct, [{1, string},
          {2, {list, i64}}]}
;
function_info('expungeSharedNotebooks', reply_type) ->
  i32;
function_info('expungeSharedNotebooks', exceptions) ->
  {struct, [{1, {struct, {'errors_types', 'EDAMUserException'}}},
          {2, {struct, {'errors_types', 'EDAMNotFoundException'}}},
          {3, {struct, {'errors_types', 'EDAMSystemException'}}}]}
;
% createLinkedNotebook(This, AuthenticationToken, LinkedNotebook)
function_info('createLinkedNotebook', params_type) ->
  {struct, [{1, string},
          {2, {struct, {'types_types', 'LinkedNotebook'}}}]}
;
function_info('createLinkedNotebook', reply_type) ->
  {struct, {'types_types', 'LinkedNotebook'}};
function_info('createLinkedNotebook', exceptions) ->
  {struct, [{1, {struct, {'errors_types', 'EDAMUserException'}}},
          {2, {struct, {'errors_types', 'EDAMNotFoundException'}}},
          {3, {struct, {'errors_types', 'EDAMSystemException'}}}]}
;
% updateLinkedNotebook(This, AuthenticationToken, LinkedNotebook)
function_info('updateLinkedNotebook', params_type) ->
  {struct, [{1, string},
          {2, {struct, {'types_types', 'LinkedNotebook'}}}]}
;
function_info('updateLinkedNotebook', reply_type) ->
  i32;
function_info('updateLinkedNotebook', exceptions) ->
  {struct, [{1, {struct, {'errors_types', 'EDAMUserException'}}},
          {2, {struct, {'errors_types', 'EDAMNotFoundException'}}},
          {3, {struct, {'errors_types', 'EDAMSystemException'}}}]}
;
% listLinkedNotebooks(This, AuthenticationToken)
function_info('listLinkedNotebooks', params_type) ->
  {struct, [{1, string}]}
;
function_info('listLinkedNotebooks', reply_type) ->
  {list, {struct, {'types_types', 'LinkedNotebook'}}};
function_info('listLinkedNotebooks', exceptions) ->
  {struct, [{1, {struct, {'errors_types', 'EDAMUserException'}}},
          {2, {struct, {'errors_types', 'EDAMNotFoundException'}}},
          {3, {struct, {'errors_types', 'EDAMSystemException'}}}]}
;
% expungeLinkedNotebook(This, AuthenticationToken, Guid)
function_info('expungeLinkedNotebook', params_type) ->
  {struct, [{1, string},
          {2, string}]}
;
function_info('expungeLinkedNotebook', reply_type) ->
  i32;
function_info('expungeLinkedNotebook', exceptions) ->
  {struct, [{1, {struct, {'errors_types', 'EDAMUserException'}}},
          {2, {struct, {'errors_types', 'EDAMNotFoundException'}}},
          {3, {struct, {'errors_types', 'EDAMSystemException'}}}]}
;
% authenticateToSharedNotebook(This, ShareKey, AuthenticationToken)
function_info('authenticateToSharedNotebook', params_type) ->
  {struct, [{1, string},
          {2, string}]}
;
function_info('authenticateToSharedNotebook', reply_type) ->
  {struct, {'user_store_types', 'AuthenticationResult'}};
function_info('authenticateToSharedNotebook', exceptions) ->
  {struct, [{1, {struct, {'errors_types', 'EDAMUserException'}}},
          {2, {struct, {'errors_types', 'EDAMNotFoundException'}}},
          {3, {struct, {'errors_types', 'EDAMSystemException'}}}]}
;
% getSharedNotebookByAuth(This, AuthenticationToken)
function_info('getSharedNotebookByAuth', params_type) ->
  {struct, [{1, string}]}
;
function_info('getSharedNotebookByAuth', reply_type) ->
  {struct, {'types_types', 'SharedNotebook'}};
function_info('getSharedNotebookByAuth', exceptions) ->
  {struct, [{1, {struct, {'errors_types', 'EDAMUserException'}}},
          {2, {struct, {'errors_types', 'EDAMNotFoundException'}}},
          {3, {struct, {'errors_types', 'EDAMSystemException'}}}]}
;
% emailNote(This, AuthenticationToken, Parameters)
function_info('emailNote', params_type) ->
  {struct, [{1, string},
          {2, {struct, {'note_store_types', 'NoteEmailParameters'}}}]}
;
function_info('emailNote', reply_type) ->
  {struct, []};
function_info('emailNote', exceptions) ->
  {struct, [{1, {struct, {'errors_types', 'EDAMUserException'}}},
          {2, {struct, {'errors_types', 'EDAMNotFoundException'}}},
          {3, {struct, {'errors_types', 'EDAMSystemException'}}}]}
;
% shareNote(This, AuthenticationToken, Guid)
function_info('shareNote', params_type) ->
  {struct, [{1, string},
          {2, string}]}
;
function_info('shareNote', reply_type) ->
  string;
function_info('shareNote', exceptions) ->
  {struct, [{1, {struct, {'errors_types', 'EDAMUserException'}}},
          {2, {struct, {'errors_types', 'EDAMNotFoundException'}}},
          {3, {struct, {'errors_types', 'EDAMSystemException'}}}]}
;
% stopSharingNote(This, AuthenticationToken, Guid)
function_info('stopSharingNote', params_type) ->
  {struct, [{1, string},
          {2, string}]}
;
function_info('stopSharingNote', reply_type) ->
  {struct, []};
function_info('stopSharingNote', exceptions) ->
  {struct, [{1, {struct, {'errors_types', 'EDAMUserException'}}},
          {2, {struct, {'errors_types', 'EDAMNotFoundException'}}},
          {3, {struct, {'errors_types', 'EDAMSystemException'}}}]}
;
% authenticateToSharedNote(This, Guid, NoteKey, AuthenticationToken)
function_info('authenticateToSharedNote', params_type) ->
  {struct, [{1, string},
          {2, string},
          {3, string}]}
;
function_info('authenticateToSharedNote', reply_type) ->
  {struct, {'user_store_types', 'AuthenticationResult'}};
function_info('authenticateToSharedNote', exceptions) ->
  {struct, [{1, {struct, {'errors_types', 'EDAMUserException'}}},
          {2, {struct, {'errors_types', 'EDAMNotFoundException'}}},
          {3, {struct, {'errors_types', 'EDAMSystemException'}}}]}
;
% findRelated(This, AuthenticationToken, Query, ResultSpec)
function_info('findRelated', params_type) ->
  {struct, [{1, string},
          {2, {struct, {'note_store_types', 'RelatedQuery'}}},
          {3, {struct, {'note_store_types', 'RelatedResultSpec'}}}]}
;
function_info('findRelated', reply_type) ->
  {struct, {'note_store_types', 'RelatedResult'}};
function_info('findRelated', exceptions) ->
  {struct, [{1, {struct, {'errors_types', 'EDAMUserException'}}},
          {2, {struct, {'errors_types', 'EDAMSystemException'}}},
          {3, {struct, {'errors_types', 'EDAMNotFoundException'}}}]}
;
function_info(_Func, _Info) -> erlang:error(function_clause).

