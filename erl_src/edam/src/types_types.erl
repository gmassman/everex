%%
%% Autogenerated by Thrift Compiler (1.0.0-dev)
%%
%% DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
%%

-module(types_types).

-include("types_types.hrl").

-export([struct_info/1, struct_info_ext/1]).

struct_info('Data') ->
  {struct, [{1, string},
          {2, i32},
          {3, string}]}
;

struct_info('UserAttributes') ->
  {struct, [{1, string},
          {2, double},
          {3, double},
          {4, bool},
          {5, {list, string}},
          {6, string},
          {7, {list, string}},
          {9, string},
          {11, i64},
          {12, i32},
          {13, i32},
          {14, string},
          {15, i64},
          {16, i32},
          {17, i32},
          {18, i64},
          {19, i64},
          {20, string},
          {21, string},
          {22, bool},
          {23, string},
          {24, string},
          {25, string},
          {26, string},
          {28, string},
          {29, bool},
          {30, string},
          {31, bool},
          {32, bool},
          {33, bool},
          {34, i32}]}
;

struct_info('Accounting') ->
  {struct, [{1, i64},
          {2, i64},
          {3, i64},
          {4, i32},
          {5, string},
          {6, string},
          {7, i64},
          {8, string},
          {9, i64},
          {10, i64},
          {11, string},
          {12, i64},
          {13, i64},
          {14, i64},
          {16, string},
          {17, i64},
          {18, string},
          {19, i32},
          {20, i32},
          {21, string},
          {22, i32},
          {23, i32},
          {24, i64}]}
;

struct_info('BusinessUserInfo') ->
  {struct, [{1, i32},
          {2, string},
          {3, i32},
          {4, string}]}
;

struct_info('PremiumInfo') ->
  {struct, [{1, i64},
          {2, bool},
          {3, bool},
          {4, i64},
          {5, bool},
          {6, bool},
          {7, bool},
          {8, bool},
          {9, string},
          {10, i32},
          {11, bool}]}
;

struct_info('User') ->
  {struct, [{1, i32},
          {2, string},
          {3, string},
          {4, string},
          {6, string},
          {7, i32},
          {9, i64},
          {10, i64},
          {11, i64},
          {13, bool},
          {14, string},
          {15, {struct, {'types_types', 'UserAttributes'}}},
          {16, {struct, {'types_types', 'Accounting'}}},
          {17, {struct, {'types_types', 'PremiumInfo'}}},
          {18, {struct, {'types_types', 'BusinessUserInfo'}}}]}
;

struct_info('Tag') ->
  {struct, [{1, string},
          {2, string},
          {3, string},
          {4, i32}]}
;

struct_info('LazyMap') ->
  {struct, [{1, {set, string}},
          {2, {map, string, string}}]}
;

struct_info('ResourceAttributes') ->
  {struct, [{1, string},
          {2, i64},
          {3, double},
          {4, double},
          {5, double},
          {6, string},
          {7, string},
          {8, bool},
          {9, string},
          {10, string},
          {11, bool},
          {12, {struct, {'types_types', 'LazyMap'}}}]}
;

struct_info('Resource') ->
  {struct, [{1, string},
          {2, string},
          {3, {struct, {'types_types', 'Data'}}},
          {4, string},
          {5, i16},
          {6, i16},
          {7, i16},
          {8, bool},
          {9, {struct, {'types_types', 'Data'}}},
          {11, {struct, {'types_types', 'ResourceAttributes'}}},
          {12, i32},
          {13, {struct, {'types_types', 'Data'}}}]}
;

struct_info('NoteAttributes') ->
  {struct, [{1, i64},
          {10, double},
          {11, double},
          {12, double},
          {13, string},
          {14, string},
          {15, string},
          {16, string},
          {17, i64},
          {18, i64},
          {19, i64},
          {20, i64},
          {21, string},
          {22, string},
          {23, {struct, {'types_types', 'LazyMap'}}},
          {24, string},
          {26, {map, string, string}},
          {27, i32},
          {28, i32}]}
;

struct_info('Note') ->
  {struct, [{1, string},
          {2, string},
          {3, string},
          {4, string},
          {5, i32},
          {6, i64},
          {7, i64},
          {8, i64},
          {9, bool},
          {10, i32},
          {11, string},
          {12, {list, string}},
          {13, {list, {struct, {'types_types', 'Resource'}}}},
          {14, {struct, {'types_types', 'NoteAttributes'}}},
          {15, {list, string}}]}
;

struct_info('Publishing') ->
  {struct, [{1, string},
          {2, i32},
          {3, bool},
          {4, string}]}
;

struct_info('BusinessNotebook') ->
  {struct, [{1, string},
          {2, i32},
          {3, bool}]}
;

struct_info('SavedSearchScope') ->
  {struct, [{1, bool},
          {2, bool},
          {3, bool}]}
;

struct_info('SavedSearch') ->
  {struct, [{1, string},
          {2, string},
          {3, string},
          {4, i32},
          {5, i32},
          {6, {struct, {'types_types', 'SavedSearchScope'}}}]}
;

struct_info('SharedNotebookRecipientSettings') ->
  {struct, [{1, bool},
          {2, bool}]}
;

struct_info('SharedNotebook') ->
  {struct, [{1, i64},
          {2, i32},
          {3, string},
          {4, string},
          {5, bool},
          {6, bool},
          {7, i64},
          {10, i64},
          {8, string},
          {9, string},
          {11, i32},
          {12, bool},
          {13, {struct, {'types_types', 'SharedNotebookRecipientSettings'}}}]}
;

struct_info('NotebookRestrictions') ->
  {struct, [{1, bool},
          {2, bool},
          {3, bool},
          {4, bool},
          {5, bool},
          {6, bool},
          {7, bool},
          {8, bool},
          {9, bool},
          {10, bool},
          {11, bool},
          {12, bool},
          {13, bool},
          {14, bool},
          {15, bool},
          {16, bool},
          {17, bool},
          {18, bool},
          {19, i32},
          {20, i32}]}
;

struct_info('Notebook') ->
  {struct, [{1, string},
          {2, string},
          {5, i32},
          {6, bool},
          {7, i64},
          {8, i64},
          {10, {struct, {'types_types', 'Publishing'}}},
          {11, bool},
          {12, string},
          {13, {list, i64}},
          {14, {list, {struct, {'types_types', 'SharedNotebook'}}}},
          {15, {struct, {'types_types', 'BusinessNotebook'}}},
          {16, {struct, {'types_types', 'User'}}},
          {17, {struct, {'types_types', 'NotebookRestrictions'}}}]}
;

struct_info('LinkedNotebook') ->
  {struct, [{2, string},
          {3, string},
          {4, string},
          {5, string},
          {6, string},
          {7, string},
          {8, i32},
          {9, string},
          {10, string},
          {11, string},
          {12, i32}]}
;

struct_info('NotebookDescriptor') ->
  {struct, [{1, string},
          {2, string},
          {3, string},
          {4, bool},
          {5, i32}]}
;

struct_info(_) -> erlang:error(function_clause).

struct_info_ext('Data') ->
  {struct, [{1, optional, string, 'bodyHash', undefined},
          {2, optional, i32, 'size', undefined},
          {3, optional, string, 'body', undefined}]}
;

struct_info_ext('UserAttributes') ->
  {struct, [{1, optional, string, 'defaultLocationName', undefined},
          {2, optional, double, 'defaultLatitude', undefined},
          {3, optional, double, 'defaultLongitude', undefined},
          {4, optional, bool, 'preactivation', undefined},
          {5, optional, {list, string}, 'viewedPromotions', []},
          {6, optional, string, 'incomingEmailAddress', undefined},
          {7, optional, {list, string}, 'recentMailedAddresses', []},
          {9, optional, string, 'comments', undefined},
          {11, optional, i64, 'dateAgreedToTermsOfService', undefined},
          {12, optional, i32, 'maxReferrals', undefined},
          {13, optional, i32, 'referralCount', undefined},
          {14, optional, string, 'refererCode', undefined},
          {15, optional, i64, 'sentEmailDate', undefined},
          {16, optional, i32, 'sentEmailCount', undefined},
          {17, optional, i32, 'dailyEmailLimit', undefined},
          {18, optional, i64, 'emailOptOutDate', undefined},
          {19, optional, i64, 'partnerEmailOptInDate', undefined},
          {20, optional, string, 'preferredLanguage', undefined},
          {21, optional, string, 'preferredCountry', undefined},
          {22, optional, bool, 'clipFullPage', undefined},
          {23, optional, string, 'twitterUserName', undefined},
          {24, optional, string, 'twitterId', undefined},
          {25, optional, string, 'groupName', undefined},
          {26, optional, string, 'recognitionLanguage', undefined},
          {28, optional, string, 'referralProof', undefined},
          {29, optional, bool, 'educationalDiscount', undefined},
          {30, optional, string, 'businessAddress', undefined},
          {31, optional, bool, 'hideSponsorBilling', undefined},
          {32, optional, bool, 'taxExempt', undefined},
          {33, optional, bool, 'useEmailAutoFiling', undefined},
          {34, optional, i32, 'reminderEmailConfig', undefined}]}
;

struct_info_ext('Accounting') ->
  {struct, [{1, optional, i64, 'uploadLimit', undefined},
          {2, optional, i64, 'uploadLimitEnd', undefined},
          {3, optional, i64, 'uploadLimitNextMonth', undefined},
          {4, optional, i32, 'premiumServiceStatus', undefined},
          {5, optional, string, 'premiumOrderNumber', undefined},
          {6, optional, string, 'premiumCommerceService', undefined},
          {7, optional, i64, 'premiumServiceStart', undefined},
          {8, optional, string, 'premiumServiceSKU', undefined},
          {9, optional, i64, 'lastSuccessfulCharge', undefined},
          {10, optional, i64, 'lastFailedCharge', undefined},
          {11, optional, string, 'lastFailedChargeReason', undefined},
          {12, optional, i64, 'nextPaymentDue', undefined},
          {13, optional, i64, 'premiumLockUntil', undefined},
          {14, optional, i64, 'updated', undefined},
          {16, optional, string, 'premiumSubscriptionNumber', undefined},
          {17, optional, i64, 'lastRequestedCharge', undefined},
          {18, optional, string, 'currency', undefined},
          {19, optional, i32, 'unitPrice', undefined},
          {20, optional, i32, 'businessId', undefined},
          {21, optional, string, 'businessName', undefined},
          {22, optional, i32, 'businessRole', undefined},
          {23, optional, i32, 'unitDiscount', undefined},
          {24, optional, i64, 'nextChargeDate', undefined}]}
;

struct_info_ext('BusinessUserInfo') ->
  {struct, [{1, optional, i32, 'businessId', undefined},
          {2, optional, string, 'businessName', undefined},
          {3, optional, i32, 'role', undefined},
          {4, optional, string, 'email', undefined}]}
;

struct_info_ext('PremiumInfo') ->
  {struct, [{1, required, i64, 'currentTime', undefined},
          {2, required, bool, 'premium', undefined},
          {3, required, bool, 'premiumRecurring', undefined},
          {4, optional, i64, 'premiumExpirationDate', undefined},
          {5, required, bool, 'premiumExtendable', undefined},
          {6, required, bool, 'premiumPending', undefined},
          {7, required, bool, 'premiumCancellationPending', undefined},
          {8, required, bool, 'canPurchaseUploadAllowance', undefined},
          {9, optional, string, 'sponsoredGroupName', undefined},
          {10, optional, i32, 'sponsoredGroupRole', undefined},
          {11, optional, bool, 'premiumUpgradable', undefined}]}
;

struct_info_ext('User') ->
  {struct, [{1, optional, i32, 'id', undefined},
          {2, optional, string, 'username', undefined},
          {3, optional, string, 'email', undefined},
          {4, optional, string, 'name', undefined},
          {6, optional, string, 'timezone', undefined},
          {7, optional, i32, 'privilege', undefined},
          {9, optional, i64, 'created', undefined},
          {10, optional, i64, 'updated', undefined},
          {11, optional, i64, 'deleted', undefined},
          {13, optional, bool, 'active', undefined},
          {14, optional, string, 'shardId', undefined},
          {15, optional, {struct, {'types_types', 'UserAttributes'}}, 'attributes', #'UserAttributes'{}},
          {16, optional, {struct, {'types_types', 'Accounting'}}, 'accounting', #'Accounting'{}},
          {17, optional, {struct, {'types_types', 'PremiumInfo'}}, 'premiumInfo', #'PremiumInfo'{}},
          {18, optional, {struct, {'types_types', 'BusinessUserInfo'}}, 'businessUserInfo', #'BusinessUserInfo'{}}]}
;

struct_info_ext('Tag') ->
  {struct, [{1, optional, string, 'guid', undefined},
          {2, optional, string, 'name', undefined},
          {3, optional, string, 'parentGuid', undefined},
          {4, optional, i32, 'updateSequenceNum', undefined}]}
;

struct_info_ext('LazyMap') ->
  {struct, [{1, optional, {set, string}, 'keysOnly', sets:new()},
          {2, optional, {map, string, string}, 'fullMap', dict:new()}]}
;

struct_info_ext('ResourceAttributes') ->
  {struct, [{1, optional, string, 'sourceURL', undefined},
          {2, optional, i64, 'timestamp', undefined},
          {3, optional, double, 'latitude', undefined},
          {4, optional, double, 'longitude', undefined},
          {5, optional, double, 'altitude', undefined},
          {6, optional, string, 'cameraMake', undefined},
          {7, optional, string, 'cameraModel', undefined},
          {8, optional, bool, 'clientWillIndex', undefined},
          {9, optional, string, 'recoType', undefined},
          {10, optional, string, 'fileName', undefined},
          {11, optional, bool, 'attachment', undefined},
          {12, optional, {struct, {'types_types', 'LazyMap'}}, 'applicationData', #'LazyMap'{}}]}
;

struct_info_ext('Resource') ->
  {struct, [{1, optional, string, 'guid', undefined},
          {2, optional, string, 'noteGuid', undefined},
          {3, optional, {struct, {'types_types', 'Data'}}, 'data', #'Data'{}},
          {4, optional, string, 'mime', undefined},
          {5, optional, i16, 'width', undefined},
          {6, optional, i16, 'height', undefined},
          {7, optional, i16, 'duration', undefined},
          {8, optional, bool, 'active', undefined},
          {9, optional, {struct, {'types_types', 'Data'}}, 'recognition', #'Data'{}},
          {11, optional, {struct, {'types_types', 'ResourceAttributes'}}, 'attributes', #'ResourceAttributes'{}},
          {12, optional, i32, 'updateSequenceNum', undefined},
          {13, optional, {struct, {'types_types', 'Data'}}, 'alternateData', #'Data'{}}]}
;

struct_info_ext('NoteAttributes') ->
  {struct, [{1, optional, i64, 'subjectDate', undefined},
          {10, optional, double, 'latitude', undefined},
          {11, optional, double, 'longitude', undefined},
          {12, optional, double, 'altitude', undefined},
          {13, optional, string, 'author', undefined},
          {14, optional, string, 'source', undefined},
          {15, optional, string, 'sourceURL', undefined},
          {16, optional, string, 'sourceApplication', undefined},
          {17, optional, i64, 'shareDate', undefined},
          {18, optional, i64, 'reminderOrder', undefined},
          {19, optional, i64, 'reminderDoneTime', undefined},
          {20, optional, i64, 'reminderTime', undefined},
          {21, optional, string, 'placeName', undefined},
          {22, optional, string, 'contentClass', undefined},
          {23, optional, {struct, {'types_types', 'LazyMap'}}, 'applicationData', #'LazyMap'{}},
          {24, optional, string, 'lastEditedBy', undefined},
          {26, optional, {map, string, string}, 'classifications', dict:new()},
          {27, optional, i32, 'creatorId', undefined},
          {28, optional, i32, 'lastEditorId', undefined}]}
;

struct_info_ext('Note') ->
  {struct, [{1, optional, string, 'guid', undefined},
          {2, optional, string, 'title', undefined},
          {3, optional, string, 'content', undefined},
          {4, optional, string, 'contentHash', undefined},
          {5, optional, i32, 'contentLength', undefined},
          {6, optional, i64, 'created', undefined},
          {7, optional, i64, 'updated', undefined},
          {8, optional, i64, 'deleted', undefined},
          {9, optional, bool, 'active', undefined},
          {10, optional, i32, 'updateSequenceNum', undefined},
          {11, optional, string, 'notebookGuid', undefined},
          {12, optional, {list, string}, 'tagGuids', []},
          {13, optional, {list, {struct, {'types_types', 'Resource'}}}, 'resources', []},
          {14, optional, {struct, {'types_types', 'NoteAttributes'}}, 'attributes', #'NoteAttributes'{}},
          {15, optional, {list, string}, 'tagNames', []}]}
;

struct_info_ext('Publishing') ->
  {struct, [{1, optional, string, 'uri', undefined},
          {2, optional, i32, 'order', undefined},
          {3, optional, bool, 'ascending', undefined},
          {4, optional, string, 'publicDescription', undefined}]}
;

struct_info_ext('BusinessNotebook') ->
  {struct, [{1, optional, string, 'notebookDescription', undefined},
          {2, optional, i32, 'privilege', undefined},
          {3, optional, bool, 'recommended', undefined}]}
;

struct_info_ext('SavedSearchScope') ->
  {struct, [{1, optional, bool, 'includeAccount', undefined},
          {2, optional, bool, 'includePersonalLinkedNotebooks', undefined},
          {3, optional, bool, 'includeBusinessLinkedNotebooks', undefined}]}
;

struct_info_ext('SavedSearch') ->
  {struct, [{1, optional, string, 'guid', undefined},
          {2, optional, string, 'name', undefined},
          {3, optional, string, 'query', undefined},
          {4, optional, i32, 'format', undefined},
          {5, optional, i32, 'updateSequenceNum', undefined},
          {6, optional, {struct, {'types_types', 'SavedSearchScope'}}, 'scope', #'SavedSearchScope'{}}]}
;

struct_info_ext('SharedNotebookRecipientSettings') ->
  {struct, [{1, optional, bool, 'reminderNotifyEmail', undefined},
          {2, optional, bool, 'reminderNotifyInApp', undefined}]}
;

struct_info_ext('SharedNotebook') ->
  {struct, [{1, optional, i64, 'id', undefined},
          {2, optional, i32, 'userId', undefined},
          {3, optional, string, 'notebookGuid', undefined},
          {4, optional, string, 'email', undefined},
          {5, optional, bool, 'notebookModifiable', undefined},
          {6, optional, bool, 'requireLogin', undefined},
          {7, optional, i64, 'serviceCreated', undefined},
          {10, optional, i64, 'serviceUpdated', undefined},
          {8, optional, string, 'shareKey', undefined},
          {9, optional, string, 'username', undefined},
          {11, optional, i32, 'privilege', undefined},
          {12, optional, bool, 'allowPreview', undefined},
          {13, optional, {struct, {'types_types', 'SharedNotebookRecipientSettings'}}, 'recipientSettings', #'SharedNotebookRecipientSettings'{}}]}
;

struct_info_ext('NotebookRestrictions') ->
  {struct, [{1, optional, bool, 'noReadNotes', undefined},
          {2, optional, bool, 'noCreateNotes', undefined},
          {3, optional, bool, 'noUpdateNotes', undefined},
          {4, optional, bool, 'noExpungeNotes', undefined},
          {5, optional, bool, 'noShareNotes', undefined},
          {6, optional, bool, 'noEmailNotes', undefined},
          {7, optional, bool, 'noSendMessageToRecipients', undefined},
          {8, optional, bool, 'noUpdateNotebook', undefined},
          {9, optional, bool, 'noExpungeNotebook', undefined},
          {10, optional, bool, 'noSetDefaultNotebook', undefined},
          {11, optional, bool, 'noSetNotebookStack', undefined},
          {12, optional, bool, 'noPublishToPublic', undefined},
          {13, optional, bool, 'noPublishToBusinessLibrary', undefined},
          {14, optional, bool, 'noCreateTags', undefined},
          {15, optional, bool, 'noUpdateTags', undefined},
          {16, optional, bool, 'noExpungeTags', undefined},
          {17, optional, bool, 'noSetParentTag', undefined},
          {18, optional, bool, 'noCreateSharedNotebooks', undefined},
          {19, optional, i32, 'updateWhichSharedNotebookRestrictions', undefined},
          {20, optional, i32, 'expungeWhichSharedNotebookRestrictions', undefined}]}
;

struct_info_ext('Notebook') ->
  {struct, [{1, optional, string, 'guid', undefined},
          {2, optional, string, 'name', undefined},
          {5, optional, i32, 'updateSequenceNum', undefined},
          {6, optional, bool, 'defaultNotebook', undefined},
          {7, optional, i64, 'serviceCreated', undefined},
          {8, optional, i64, 'serviceUpdated', undefined},
          {10, optional, {struct, {'types_types', 'Publishing'}}, 'publishing', #'Publishing'{}},
          {11, optional, bool, 'published', undefined},
          {12, optional, string, 'stack', undefined},
          {13, optional, {list, i64}, 'sharedNotebookIds', []},
          {14, optional, {list, {struct, {'types_types', 'SharedNotebook'}}}, 'sharedNotebooks', []},
          {15, optional, {struct, {'types_types', 'BusinessNotebook'}}, 'businessNotebook', #'BusinessNotebook'{}},
          {16, optional, {struct, {'types_types', 'User'}}, 'contact', #'User'{}},
          {17, optional, {struct, {'types_types', 'NotebookRestrictions'}}, 'restrictions', #'NotebookRestrictions'{}}]}
;

struct_info_ext('LinkedNotebook') ->
  {struct, [{2, optional, string, 'shareName', undefined},
          {3, optional, string, 'username', undefined},
          {4, optional, string, 'shardId', undefined},
          {5, optional, string, 'shareKey', undefined},
          {6, optional, string, 'uri', undefined},
          {7, optional, string, 'guid', undefined},
          {8, optional, i32, 'updateSequenceNum', undefined},
          {9, optional, string, 'noteStoreUrl', undefined},
          {10, optional, string, 'webApiUrlPrefix', undefined},
          {11, optional, string, 'stack', undefined},
          {12, optional, i32, 'businessId', undefined}]}
;

struct_info_ext('NotebookDescriptor') ->
  {struct, [{1, optional, string, 'guid', undefined},
          {2, optional, string, 'notebookDisplayName', undefined},
          {3, optional, string, 'contactName', undefined},
          {4, optional, bool, 'hasSharedNotebook', undefined},
          {5, optional, i32, 'joinedUserCount', undefined}]}
;

struct_info_ext(_) -> erlang:error(function_clause).

